name: Staging Deploy

on:
  workflow_call:
    secrets:
      AZURE_CREDENTIALS:
        required: true
      AZURE_CONTAINER_REGISTRY:
        required: true
      RESOURCE_GROUP:
        required: true        
      AKS_CLUSTER_STAGING:
        required: true        

jobs:
  staging:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials for staging
        run: |
          az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} \
                                 --name ${{ secrets.AKS_CLUSTER_STAGING }} \
                                 --overwrite-existing

      - name: Deploy k8s manifests to staging AKS
        run: kubectl apply -f k8s/

      - name: Wait for pods ready (up to 3 minutes)
        run: |
          for i in $(seq 1 36); do
            NOTREADY=$(kubectl get pods --no-headers | grep -v Running || true)
            if [ -z "$NOTREADY" ]; then
              echo "All pods running"
              break
            fi
            echo "Waiting for pods to be ready..."
            kubectl get pods --no-headers
            sleep 5
          done
          kubectl get pods -o wide

      - name: Get frontend external IP and run simple acceptance test
        id: acceptance
        run: |
          FRONT_SVC="frontend-w10e1"

          for i in $(seq 1 60); do
            IP=$(kubectl get svc $FRONT_SVC -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -n "$IP" ]; then
              echo "Frontend IP: $IP"
              break
            fi
            sleep 5
          done

          if [ -z "$IP" ]; then
            echo "ERROR: frontend LoadBalancer IP not assigned"
            kubectl get svc
            exit 1
          fi

          echo "FRONTEND_IP=$IP" >> $GITHUB_ENV
          echo "Waiting 10s for service to respond..."
          sleep 10
          echo "HTTP check:"
          curl -sSf --max-time 10 "http://$IP" || (echo "HTTP check failed"; exit 1)
