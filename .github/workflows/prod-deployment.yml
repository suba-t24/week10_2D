name: Prod Deploy

on:
  push:
    branches:
      - main

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  prod:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_PROD }} \
            --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update \
            --name ${{ secrets.AKS_CLUSTER_PROD }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --attach-acr ${{ secrets.AZURE_CONTAINER_NAME }}

      - name: Deploy Backend Infrastructure (DBs, ConfigMaps, Secrets)
        run: |
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f customer-db.yaml

      - name: Deploy Backend Microservices
        run: |
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
          kubectl apply -f customer-service.yaml

      - name: Wait for Backend LoadBalancer IPs and set env
        id: backend_ips
        run: |
          declare -A BACKEND_SVCS=( 
            ["product-service-w10e1"]="PRODUCT_API_URL" 
            ["order-service-w10e1"]="ORDER_API_URL" 
            ["customer-service-w10e1"]="CUSTOMER_API_URL" 
          )

          for SVC in "${!BACKEND_SVCS[@]}"; do
            echo "Waiting for $SVC external IP..."
            for i in $(seq 1 60); do
              BACKEND_IP=$(kubectl get svc $SVC -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
              PORT=$(kubectl get svc $SVC -o jsonpath='{.spec.ports[0].port}' 2>/dev/null || echo "")
              if [ -n "$BACKEND_IP" ] && [ -n "$PORT" ]; then
                echo "Found $SVC -> $BACKEND_IP:$PORT"
                echo "${BACKEND_SVCS[$SVC]}=http://$BACKEND_IP:$PORT" >> $GITHUB_ENV
                break
              fi
              echo "Retrying $SVC... waiting 5s"
              sleep 5
            done

            if [ -z "$BACKEND_IP" ] || [ -z "$PORT" ]; then
              echo "ERROR: $SVC LoadBalancer IP or port not assigned"
              exit 1
            fi
          done

      - name: Inject Backend API URLs into frontend/main.js
        run: |
          echo "Injecting backend API URLs into frontend/main.js"
          sed -i "s|_PRODUCT_API_URL_|${PRODUCT_API_URL}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${ORDER_API_URL}|g" frontend/main.js
          sed -i "s|_CUSTOMER_API_URL_|${CUSTOMER_API_URL}|g" frontend/main.js

      - name: Login to ACR
        run: |
          az acr login --name ${{ secrets.AZURE_CONTAINER_NAME }}

      - name: Build & Push frontend
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

      - name: Deploy Frontend Service
        run: |
          cd k8s/
          kubectl apply -f frontend.yaml
          kubectl set image deployment/frontend-w10e1 frontend-container=${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}
          kubectl rollout status deployment/frontend-w10e1

      - name: Wait for all pods to be ready (up to 3 minutes)
        run: |
          kubectl wait --for=condition=ready pod --all --timeout=180s
          kubectl get pods -o wide

  verify:
    runs-on: ubuntu-latest
    needs: prod

    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_PROD }} \
            --overwrite-existing

      - name: Get frontend external IP
        id: getip
        run: |
          FRONT_SVC="frontend-w10e1"
          for i in $(seq 1 60); do
            IP=$(kubectl get svc $FRONT_SVC -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -n "$IP" ]; then
              echo "Frontend IP: $IP"
              echo "FRONTEND_IP=$IP" >> $GITHUB_ENV
              break
            fi
            sleep 5
          done
          if [ -z "$IP" ]; then
            echo "ERROR: frontend LoadBalancer IP not assigned"
            kubectl get svc
            exit 1
          fi

      - name: Verify frontend is responding
        run: |
          echo "Testing http://$FRONTEND_IP ..."
          curl -f http://$FRONTEND_IP || (echo "Frontend not responding!" && exit 1)
          echo "âœ… Deployment successful! Application is live at http://$FRONTEND_IP"
